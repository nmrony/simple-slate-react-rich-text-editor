{"version":3,"sources":["helpers/components.jsx","TextEditor.jsx","plugins/slate-imagify-url.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","_templateObject","props","primary","Image","img","_templateObject2","selected","ToolBarButton","span","_templateObject3","reversed","active","Icon","_ref","className","rest","Object","objectWithoutProperties","react_default","a","createElement","assign","concat","_templateObject4","Menu","div","_templateObject5","Toolbar","_templateObject6","Input","input","_templateObject7","inputColor","allowedImageTypes","plugin","PluginEditList","plugins","_options$insertPasted","arguments","length","undefined","insertPastedImage","onCommand","command","change","next","url","type","args","isUrl","text","imgExtentionFromUrl","split","pop","toLowerCase","indexOf","moveToEnd","fetch","then","extension","headers","get","catch","error","console","log","PasteImagify","INITIAL_STATE","Value","fromJSON","document","nodes","object","schema","blocks","image","isVoid","DEFAULT_NODE","isEnterPressed","isKeyHotkey","isTabPressed","isBoldHotkey","isItalicHotkey","isUnderlinedHotkey","isCodeHotkey","TextEditor","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","commands","editor","insertBlock","data","src","moveToStartOfNextText","focus","hasMark","state","value","activeMarks","some","mark","hasBlock","node","ref","execute","renderMarkButton","icon","isActive","onMouseDown","event","onClickMark","renderBlockButton","includes","_this$state$value","size","parent","getParent","first","key","onClickBlock","renderNode","attributes","children","isFocused","isCurrentItem","utils","getItemsAtRange","contains","title","href","onImageUpload","preventDefault","selectedFile","target","files","name","reader","FileReader","addEventListener","alert","result","readAsDataURL","renderMark","onChange","setState","onKeyDown","decreaseItemDepth","changes","_plugin$utils","isSelectionInList","getItemDepth","isItemInList","checkTopLevelNodeLength","toggleMark","assertThisInitialized","setBlocks","unwrapBlock","unwrapList","wrapBlock","saveEditorContent","content","JSON","stringify","toJSON","jsonSize","window","confirm","localStorage","setItem","counter","handleContentRestore","jsonContent","getItem","parse","_this$state","topLevelNodeLength","toArray","handleNodeCounter","fileUpload","React","createRef","_this2","Fragment","style","display","current","click","slate_react_es","autoFocus","placeholder","shouldNodeComponentUpdate","onClick","min","role","aria-label","Component","App","src_TextEditor","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7d5ab2a.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport const Button = styled.button`\n  background: ${props => (props.primary ? 'palevioletred' : 'white')};\n  color: ${props => (props.primary ? 'white' : 'palevioletred')};\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n\n  &:hover {\n    background: ${props => (props.primary ? 'palevioletred' : 'white')};\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  max-height: 20em;\n  box-shadow: ${props => (props.selected ? '0 0 0 2px blue;' : 'none')};\n`;\n\nexport const ToolBarButton = styled.span`\n  cursor: pointer;\n  color: ${props => (props.reversed ? (props.active ? 'white' : '#aaa') : props.active ? 'black' : '#ccc')};\n`;\n\nexport const Icon = styled(({ className, ...rest }) => {\n  return <span className={`material-icons ${className}`} {...rest} />;\n})`\n  font-size: 18px;\n  vertical-align: text-bottom;\n`;\n\nexport const Menu = styled.div`\n  & > * {\n    display: inline-block;\n  }\n  & > * + * {\n    margin-left: 15px;\n  }\n`;\n\nexport const Toolbar = styled(Menu)`\n  position: relative;\n  padding: 1px 18px 17px;\n  margin: 0 -20px;\n  border-bottom: 2px solid #eee;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  padding: 0.75em;\n  margin: 0.75em;\n  color: ${props => props.inputColor || 'palevioletred'};\n  border: 1px solid;\n  border-radius: 3px;\n`;\n","import PluginEditList from '@guestbell/slate-edit-list';\nimport { isKeyHotkey } from 'is-hotkey';\nimport jsonSize from 'json-size';\nimport React, { Component } from 'react';\nimport { Value } from 'slate';\nimport { Editor } from 'slate-react';\nimport { Button, Icon, Image, Input, Toolbar, ToolBarButton } from './helpers/components';\nimport PasteImagify from './plugins/slate-imagify-url';\nconst allowedImageTypes = ['jpg', 'jpeg', 'png', 'gif', 'svg'];\nconst plugin = PluginEditList();\nconst plugins = [plugin, PasteImagify()];\n\nconst INITIAL_STATE = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: 'block',\n        type: 'paragraph',\n        nodes: [\n          {\n            object: 'text'\n          }\n        ]\n      }\n    ]\n  }\n});\n\nconst schema = {\n  blocks: {\n    image: {\n      isVoid: true\n    }\n  }\n};\n\n/**\n * Define the default node type.\n *\n * @type {String}\n */\nconst DEFAULT_NODE = 'paragraph';\n\n/**\n * Define Hotkeys\n */\nconst isEnterPressed = isKeyHotkey('enter');\nconst isTabPressed = isKeyHotkey('tab');\nconst isBoldHotkey = isKeyHotkey('mod+b');\nconst isItalicHotkey = isKeyHotkey('mod+i');\nconst isUnderlinedHotkey = isKeyHotkey('mod+u');\nconst isCodeHotkey = isKeyHotkey('mod+`');\n\nclass TextEditor extends Component {\n  /**\n   * Deserialize the initial editor value.\n   * @type {Object}\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: INITIAL_STATE,\n      counter: 0\n    };\n    this.fileUpload = React.createRef();\n  }\n\n  commands = {\n    insertPastedImage(editor, url) {\n      editor\n        .insertBlock({\n          type: 'image',\n          data: { src: url }\n        })\n        .insertBlock(DEFAULT_NODE)\n        .moveToStartOfNextText()\n        .focus();\n    }\n  };\n\n  /**\n   * Render.\n   *\n   * @return {Element}\n   */\n  render() {\n    return (\n      <>\n        <div className=\"text-editor\">\n          <input\n            type=\"file\"\n            name=\"file\"\n            onChange={this.onImageUpload}\n            style={{ display: 'none' }}\n            ref={this.fileUpload}\n          />\n          <Toolbar>\n            {this.renderMarkButton('bold', 'format_bold')}\n            {this.renderMarkButton('italic', 'format_italic')}\n            {this.renderMarkButton('underlined', 'format_underlined')}\n            {this.renderMarkButton('code', 'code')}\n            {this.renderBlockButton('heading-one', 'looks_one')}\n            {this.renderBlockButton('heading-two', 'looks_two')}\n            {this.renderBlockButton('block-quote', 'format_quote')}\n            {this.renderBlockButton('ol_list', 'format_list_numbered')}\n            {this.renderBlockButton('ul_list', 'format_list_bulleted')}\n            <ToolBarButton onMouseDown={event => this.fileUpload.current.click()}>\n              <Icon>{`image`}</Icon>\n            </ToolBarButton>\n          </Toolbar>\n          <Editor\n            plugins={plugins}\n            schema={schema}\n            autoFocus\n            commands={this.commands}\n            placeholder=\"Enter some rich text...\"\n            ref={this.ref}\n            value={this.state.value}\n            onChange={this.onChange}\n            onKeyDown={this.onKeyDown}\n            renderNode={this.renderNode}\n            renderMark={this.renderMark}\n            shouldNodeComponentUpdate={props => props.node.type === 'list_item'}\n          />\n        </div>\n        <div>\n          <Button onClick={this.saveEditorContent} primary={true}>\n            Save{' '}\n          </Button>\n          <Button onClick={this.handleContentRestore}>Restore </Button>\n          Node Count: <Input type=\"number\" min=\"0\" value={this.state.counter} onChange={this.handleNodeCounter} />\n          <sup>*</sup>\n          <div className=\"notes\">\n            <ul>\n              <li>\n                * <em>0</em> for unlimited entry.\n              </li>\n              <li>Built on latest Slate</li>\n              <li>Supported image: jpg, jpeg, png, gif, svg</li>\n              <li>\n                Done in hurry, did not follow best practices. apologies{' '}\n                <span role=\"img\" aria-label=\"wink\">\n                  😉\n                </span>\n              </li>\n              <li>Adds single command github page deployment task as well</li>\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  /**\n   * Check if the current selection has a mark with `type` in it.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n  hasMark = type => {\n    const { value } = this.state;\n    return value.activeMarks.some(mark => mark.type === type);\n  };\n\n  /**\n   * Check if the any of the currently selected blocks are of `type`.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n  hasBlock = type => {\n    const { value } = this.state;\n    return value.blocks.some(node => node.type === type);\n  };\n\n  /**\n   * Store a reference to the `editor`.\n   *\n   * @param {Editor} editor\n   */\n  ref = editor => {\n    this.editor = editor;\n  };\n\n  /**\n   *  execute Editor commands\n   *\n   * @memberof TextEditor\n   */\n  execute = command => {\n    this.editor.command(command);\n  };\n\n  /**\n   * Render a mark-toggling toolbar button.\n   *\n   * @param {String} type\n   * @param {String} icon\n   * @return {Element}\n   */\n  renderMarkButton = (type, icon) => {\n    const isActive = this.hasMark(type);\n\n    return (\n      <ToolBarButton active={isActive} onMouseDown={event => this.onClickMark(event, type)}>\n        <Icon>{icon}</Icon>\n      </ToolBarButton>\n    );\n  };\n\n  /**\n   * Render a block-toggling toolbar button.\n   *\n   * @param {String} type\n   * @param {String} icon\n   * @return {Element}\n   */\n  renderBlockButton = (type, icon) => {\n    let isActive = this.hasBlock(type);\n\n    if (['ol_list', 'ul_list'].includes(type)) {\n      const {\n        value: { document, blocks }\n      } = this.state;\n\n      if (blocks.size > 0) {\n        const parent = document.getParent(blocks.first().key);\n        isActive = this.hasBlock('list-item') && parent && parent.type === type;\n      }\n    }\n\n    return (\n      <ToolBarButton active={isActive} onMouseDown={event => this.onClickBlock(event, type)}>\n        <Icon>{icon}</Icon>\n      </ToolBarButton>\n    );\n  };\n\n  /**\n   * Render a Slate node.\n   *\n   * @param {Object} props\n   * @return {Element}\n   */\n  renderNode = (props, editor, next) => {\n    const { attributes, children, node, isFocused } = props;\n    const isCurrentItem = plugin.utils.getItemsAtRange(editor.value).contains(node);\n    switch (node.type) {\n      case 'image':\n        const src = node.data.get('src');\n        return <Image src={src} selected={isFocused} {...attributes} />;\n      case 'block-quote':\n        return <blockquote {...attributes}>{children}</blockquote>;\n      case 'ul_list':\n        return <ul {...attributes}>{children}</ul>;\n      case 'heading-one':\n        return <h1 {...attributes}>{children}</h1>;\n      case 'heading-two':\n        return <h2 {...attributes}>{children}</h2>;\n      case 'list_item':\n        return (\n          <li\n            className={isCurrentItem ? 'current-item' : ''}\n            title={isCurrentItem ? 'Current Item' : ''}\n            {...props.attributes}\n          >\n            {props.children}\n          </li>\n        );\n      case 'ol_list':\n        return <ol {...attributes}>{children}</ol>;\n      case 'link':\n        return (\n          <a {...attributes} href={node.data.get('url')}>\n            {children}\n          </a>\n        );\n      default:\n        return next();\n    }\n  };\n\n  /**\n   * Handles Image Upload\n   *\n   * @memberof TextEditor\n   */\n  onImageUpload = event => {\n    event.preventDefault();\n    const selectedFile = event.target.files[0];\n    const { name } = selectedFile;\n    const extension = name\n      .split('.')\n      .pop()\n      .toLowerCase();\n    const reader = new FileReader();\n    reader.addEventListener(\n      'load',\n      () => {\n        if (allowedImageTypes.indexOf(extension) === -1) {\n          return alert('Please select an image file');\n        }\n        this.editor\n          .insertBlock({\n            type: 'image',\n            isVoid: true,\n            data: { src: reader.result }\n          })\n          .insertBlock(DEFAULT_NODE)\n          .moveToStartOfNextText()\n          .focus();\n      },\n      false\n    );\n\n    if (selectedFile) {\n      reader.readAsDataURL(selectedFile);\n    }\n  };\n\n  /**\n   * Render a Slate mark.\n   *\n   * @param {Object} props\n   * @return {Element}\n   */\n  renderMark = (props, editor, next) => {\n    const { children, mark, attributes } = props;\n\n    switch (mark.type) {\n      case 'bold':\n        return <strong {...attributes}>{children}</strong>;\n      case 'code':\n        return <code {...attributes}>{children}</code>;\n      case 'italic':\n        return <em {...attributes}>{children}</em>;\n      case 'underlined':\n        return <u {...attributes}>{children}</u>;\n      default:\n        return next();\n    }\n  };\n\n  /**\n   * On change, save the new `value`.\n   *\n   * @param {Editor} editor\n   */\n  onChange = ({ value }) => {\n    this.setState({ value });\n  };\n\n  /**\n   * On key down, if it's a formatting command toggle a mark.\n   *\n   * @param {Event} event\n   * @param {Editor} editor\n   * @return {Change}\n   */\n  onKeyDown = (event, editor, next) => {\n    let mark;\n    if (isTabPressed(event)) {\n      const { decreaseItemDepth } = plugin.changes;\n      const { isSelectionInList, getItemDepth } = plugin.utils;\n      const { value } = this.state;\n      const isItemInList = isSelectionInList(value);\n      const itemDepth = getItemDepth(value);\n      if (itemDepth === 3 && isItemInList) {\n        this.execute(decreaseItemDepth);\n        return next();\n      }\n      return next();\n    } else if (isEnterPressed(event)) {\n      return this.checkTopLevelNodeLength(next);\n    } else if (isBoldHotkey(event)) {\n      mark = 'bold';\n    } else if (isItalicHotkey(event)) {\n      mark = 'italic';\n    } else if (isUnderlinedHotkey(event)) {\n      mark = 'underlined';\n    } else if (isCodeHotkey(event)) {\n      mark = 'code';\n    } else {\n      return next();\n    }\n\n    event.preventDefault();\n    editor.toggleMark(mark);\n  };\n\n  /**\n   * When a mark button is clicked, toggle the current mark.\n   *\n   * @param {Event} event\n   * @param {String} type\n   */\n  onClickMark = (event, type) => {\n    event.preventDefault();\n    this.editor.toggleMark(type);\n  };\n\n  /**\n   * When a block button is clicked, toggle the block type.\n   *\n   * @param {Event} event\n   * @param {String} type\n   */\n  onClickBlock = (event, type) => {\n    event.preventDefault();\n\n    const { editor } = this;\n    const { value } = editor;\n    // Handle everything but list buttons.\n    if (type !== 'ul_list' && type !== 'ol_list') {\n      const isActive = this.hasBlock(type);\n      const isList = this.hasBlock('list-item');\n\n      if (isList) {\n        editor\n          .setBlocks(isActive ? DEFAULT_NODE : type)\n          .unwrapBlock('ul_list')\n          .unwrapBlock('ol_list');\n      } else {\n        editor.setBlocks(isActive ? DEFAULT_NODE : type);\n      }\n    } else {\n      // Handle the extra wrapping required for list buttons.\n      const { isSelectionInList } = plugin.utils;\n      const { unwrapList } = plugin.changes;\n      const isItemInList = isSelectionInList(value);\n      if (isItemInList) {\n        this.execute(unwrapList);\n      } else {\n        editor.unwrapBlock(type === 'ul_list' ? 'ol_list' : 'ul_list').wrapBlock(type);\n      }\n    }\n  };\n\n  /**\n   * Save Editor Content\n   *\n   * @memberof TextEditor\n   */\n  saveEditorContent = event => {\n    event.preventDefault();\n    const { value } = this.state;\n    const content = JSON.stringify(value.toJSON());\n    if (jsonSize(content) > 5 * 1e6) {\n      return alert('Localstorage capasity exceeded!!');\n    }\n\n    if (window.confirm('Are you sure to save editor content?')) {\n      localStorage.setItem('content', content);\n      this.setState({\n        value: INITIAL_STATE,\n        counter: 0\n      });\n    }\n  };\n\n  /**\n   * Restore Editor Content\n   *\n   * @memberof TextEditor\n   */\n  handleContentRestore = event => {\n    event.preventDefault();\n    const jsonContent = localStorage.getItem('content');\n    const content = (jsonContent && JSON.parse(jsonContent)) || INITIAL_STATE;\n    this.setState({\n      value: Value.fromJSON(content),\n      counter: 0\n    });\n  };\n\n  /**\n   * Restrict Editor content\n   *\n   * @memberof TextEditor\n   */\n  checkTopLevelNodeLength = next => {\n    const { value, counter } = this.state;\n    const topLevelNodeLength = value.document.nodes.toArray().length;\n    return (counter === 0 || topLevelNodeLength < counter) && next();\n  };\n\n  /**\n   * Set number of top level slate node length\n   *\n   * @memberof TextEditor\n   */\n  handleNodeCounter = event => {\n    this.setState({\n      counter: event.target.value\n    });\n  };\n}\n\nexport default TextEditor;\n","import isUrl from 'is-url';\n\nexport default function PasteImagify(options = {}) {\n  const { insertPastedImage = 'insertPastedImage' } = options;\n  const allowedImageTypes = ['jpg', 'jpeg', 'png', 'gif', 'svg'];\n\n  return {\n    onCommand(command, change, next) {\n      const { type, args } = command;\n      let url;\n      if (\n        (type === 'insertText' && isUrl((url = args[0]))) ||\n        (type === 'insertFragment' && isUrl((url = args[0].text)))\n      ) {\n        const imgExtentionFromUrl = url\n          .split('.')\n          .pop()\n          .toLowerCase();\n        if (allowedImageTypes.indexOf(imgExtentionFromUrl) !== -1) {\n          change.command(insertPastedImage, url).moveToEnd();\n          return;\n        }\n\n        fetch(url)\n          .then(({ headers }) => {\n            const extension = headers\n              .get('content-type')\n              .split('/')\n              .pop();\n            if (extension && allowedImageTypes.indexOf(extension) !== -1) {\n              change.command(insertPastedImage, url).moveToEnd();\n              return;\n            }\n            next();\n          })\n\n          .catch(error => {\n            console.log('error in imagify', error);\n            next();\n          });\n        return;\n      }\n\n      next();\n    }\n  };\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TextEditor from './TextEditor';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TextEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}